{
    "title": "This is the Songs data collection",
    "desc": "Here you can find a list of real songs, not fake generated ones. Most of these songs are from 2024. Remember these endpoints actually don't modify the source data. You can use this data to enhance, mock or test your app. For details you can click each row",
    "endpoints": [
        {
            "status": "GET",
            "path": "/api/songs",
            "code": "fetch('https://fooapi.com/api/songs')\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "payload": null,
            "queries": "?limit=n",
            "response": [
                {
                    "id": "1",
                    "name": "Espresso",
                    "artists": "Sabrina Carpenter",
                    "isExplicit": true,
                    "durationMs": 175459,
                    "albumName": "Espresso",
                    "albumReleaseDate": "2024-04-12"
                },
                "49 more elements..."
            ],
            "desc": "Get an array with the complete list of elements"
        },
        {
            "status": "GET",
            "path": "/api/songs/:id",
            "code": "fetch('https://fooapi.com/api/songs/1')\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "payload": null,
            "response": {
                "id": "1",
                "name": "Espresso",
                "artists": "Sabrina Carpenter",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "Espresso",
                "albumReleaseDate": "2024-04-12"
            },
            "desc": "Get an element by ID"
        },
        {
            "status": "GET",
            "path": "/api/songs/rand",
            "code": "fetch('https://fooapi.com/api/songs/rand')\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "payload": null,
            "response": {
                "id": "1",
                "name": "Espresso",
                "artists": "Sabrina Carpenter",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "Espresso",
                "albumReleaseDate": "2024-04-12"
            },
            "desc": "Get a random element"
        },
        {
            "status": "PUT",
            "path": "/api/songs/:id",
            "code": "fetch('https://fooapi.com/api/songs/1',{\n method: 'PUT',\n headers: {'Content-Type': 'application/json'},\n body: JSON.stringify({\n  'name':'foooName',\n  'artists':'Sabrina Carpenter',\n  'isExplicit':true,\n  'durationMs':175459,\n  'albumName':'Espresso',\n  'albumReleaseDate':'2024-04-12'\n  })\n})\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "payload": {
                "name": "foooName",
                "artists": "Sabrina Carpenter",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "Espresso",
                "albumReleaseDate": "2024-04-12"
            },
            "response": {
                "id": "1",
                "name": "foooName",
                "artists": "Sabrina Carpenter",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "Espresso",
                "albumReleaseDate": "2024-04-12"
            },
            "desc": "Update a complete element"
        },
        {
            "status": "PATCH",
            "path": "/api/songs/:id",
            "code": "fetch('https://fooapi.com/api/songs/1',{\n method: 'PATCH',\n headers: {'Content-Type': 'application/json'},\n body: JSON.stringify({\n  'name':'foooName',\n  })\n})\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "payload": {
                "name": "foooName"
            },
            "response": {
                "id": "1",
                "name": "foooName",
                "artists": "Sabrina Carpenter",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "Espresso",
                "albumReleaseDate": "2024-04-12"
            },
            "desc": "Update partial fields of an element."
        },
        {
            "status": "POST",
            "path": "/api/songs",
            "code": "fetch('https://fooapi.com/api/songs',{\n method: 'POST',\n headers: {'Content-Type': 'application/json'},\n body: JSON.stringify({\n  'name':'foooName',\n  'artists':'fooArtist',\n  'isExplicit':true,\n  'durationMs':175459,\n  'albumName':'Espresso',\n  'albumReleaseDate':'2024-04-12'\n  })\n})\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "payload": {
                "name": "foooName",
                "artists": "fooArtist",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "FooAlbum",
                "albumReleaseDate": "2024-04-12"
            },
            "response": {
                "id": "51",
                "name": "foooName",
                "artists": "fooArtist",
                "isExplicit": true,
                "durationMs": 175459,
                "albumName": "FooAlbum",
                "albumReleaseDate": "2024-04-12"
            },
            "desc": "Create a new element."
        },
        {
            "status": "DELETE",
            "code": "fetch('https://fooapi.com/api/songs/1', {method: 'DELETE'})\n  .then(res => res.json())\n  .then(data => console.log(data))",
            "path": "/api/songs/:id",
            "payload": null,
            "response": {
                "id": "1"
            },
            "desc": "Delete an element."
        },
        {
            "status": "GRAPHQL",
            "path": "/query",
            "payload": {
                "query": [
                    "songs: [Song!]!",
                    "song(id: ID!): Song"
                ],
                "mutation": [
                    "createSong(input: CreateSongInput): Song!",
                    "updateSong(id: ID!, input: UpdateSongInput): Song!",
                    "deleteSong(id: ID!): Song!"
                ]
            },
            "response": {
                "data": "According to your request"
            },
            "desc": "Endpoint to send your GraphQL queries"
        },        {
            "status": "GRAPHQL",
            "path": "/playground",
            "desc": "Playground to test your GraphQL queries"
        }
    ]
}